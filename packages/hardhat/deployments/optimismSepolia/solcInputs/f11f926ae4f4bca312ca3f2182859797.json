{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Groth16Verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n\t// Scalar field size\n\tuint256 constant r =\n\t\t21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\t// Base field size\n\tuint256 constant q =\n\t\t21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n\t// Verification Key data\n\tuint256 constant alphax =\n\t\t20491192805390485299153009773594534940189261866228447918068658471970481763042;\n\tuint256 constant alphay =\n\t\t9383485363053290200918347156157836566562967994039712273449902621266178545958;\n\tuint256 constant betax1 =\n\t\t4252822878758300859123897981450591353533073413197771768651442665752259397132;\n\tuint256 constant betax2 =\n\t\t6375614351688725206403948262868962793625744043794305715222011528459656738731;\n\tuint256 constant betay1 =\n\t\t21847035105528745403288232691147584728191162732299865338377159692350059136679;\n\tuint256 constant betay2 =\n\t\t10505242626370262277552901082094356697409835680220590971873171140371331206856;\n\tuint256 constant gammax1 =\n\t\t11559732032986387107991004021392285783925812861821192530917403151452391805634;\n\tuint256 constant gammax2 =\n\t\t10857046999023057135944570762232829481370756359578518086990519993285655852781;\n\tuint256 constant gammay1 =\n\t\t4082367875863433681332203403145435568316851327593401208105741076214120093531;\n\tuint256 constant gammay2 =\n\t\t8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\tuint256 constant deltax1 =\n\t\t1866766967684475077026429609556327106093807957741725946793964808023715990993;\n\tuint256 constant deltax2 =\n\t\t4659311190982864441450729518864924847905216029076592248289990634575680082687;\n\tuint256 constant deltay1 =\n\t\t21724169671419676774033717936126866779574439945101235323290178202491573424937;\n\tuint256 constant deltay2 =\n\t\t18110855247484914672502198436947586961718950553755585790284240244644051838539;\n\n\tuint256 constant IC0x =\n\t\t18309573688944280386125138623088688452809083872692035376744546048640448830013;\n\tuint256 constant IC0y =\n\t\t8252545664804877655090584019431224476651831706926205661274438486717503078517;\n\n\tuint256 constant IC1x =\n\t\t13724968256971608639683042303568749222860593419566750935710775838848837986435;\n\tuint256 constant IC1y =\n\t\t15381662839978225352321616022337218020109204566049031666416886460526425965869;\n\n\tuint256 constant IC2x =\n\t\t6658337158533056435209096505560783453195590085837382213813946443291522907745;\n\tuint256 constant IC2y =\n\t\t9306572662774936565995161999022633816072552576090366864841219594069985311045;\n\n\tuint256 constant IC3x =\n\t\t3016212379656281472280944594543865425517575371433088764117523134258049272378;\n\tuint256 constant IC3y =\n\t\t2602541768252815682625947578833586588696693258602863952863513327213075022415;\n\n\tuint256 constant IC4x =\n\t\t9816742021460791515218039132784611020094104961681834748400830069126900470998;\n\tuint256 constant IC4y =\n\t\t10348426808259784844463456918035576955520609745619107315011093049401321052907;\n\n\tuint256 constant IC5x =\n\t\t12390552360156525734091763827502679328587811743107273011015150606880160766528;\n\tuint256 constant IC5y =\n\t\t183638701568878646260356724728606591551612270852066271019765173548740571911;\n\n\tuint256 constant IC6x =\n\t\t18835793819754396966418324264338243421396665011470795519919492253397941511415;\n\tuint256 constant IC6y =\n\t\t16276864664271038368712888193551459260270588753753324433645906101416426262868;\n\n\tuint256 constant IC7x =\n\t\t17694389750473427714713340305217978269360025960743432126841431716792259216553;\n\tuint256 constant IC7y =\n\t\t9650947012756037818471691383867973710225705683344930781931870909910681707965;\n\n\tuint256 constant IC8x =\n\t\t681023809986507260745544777274775765194577408747661170783243702960142805219;\n\tuint256 constant IC8y =\n\t\t1932661796175590584789349969886643788412159408887985979675775490813383802431;\n\n\tuint256 constant IC9x =\n\t\t21017849571203201162910042984857063559850050358879473333160388606658656055561;\n\tuint256 constant IC9y =\n\t\t3911553907221003467466493259384657847945603900216601273901250192843649327135;\n\n\tuint256 constant IC10x =\n\t\t4697167604081360102767597310388954224248974287943019142969867281938252033279;\n\tuint256 constant IC10y =\n\t\t20914530672636702782558652284783707697405729135251189269702367472029790810871;\n\n\tuint256 constant IC11x =\n\t\t7369949482368171676645913938455574124222481706187847883741316060813160352388;\n\tuint256 constant IC11y =\n\t\t4727140828630085863185239991710228583927761523693680497222423087252568656621;\n\n\tuint256 constant IC12x =\n\t\t14064206758912584845837663247671777117618297224535288981280182234011836042358;\n\tuint256 constant IC12y =\n\t\t2471602382851033672482675609087779227944480110933367708761146613365806260639;\n\n\tuint256 constant IC13x =\n\t\t10736269799746324370561665190090163352937604329850809414102258159966416105084;\n\tuint256 constant IC13y =\n\t\t19020761783205714677938272320357485323859845690764961473649357529923739843742;\n\n\tuint256 constant IC14x =\n\t\t15341136362541358347806190520786075906481708522139600214759885728822520600097;\n\tuint256 constant IC14y =\n\t\t12763186920235818095034854522833621355232606893991661714344676885217537892439;\n\n\tuint256 constant IC15x =\n\t\t578923187875322718929551148864821444409122480112505090445143545076478253219;\n\tuint256 constant IC15y =\n\t\t7225896456622788032015215894875412641425708855961584676292424041024877345434;\n\n\tuint256 constant IC16x =\n\t\t18658344448625472361514517723847121242242621605616951126291199815235032180726;\n\tuint256 constant IC16y =\n\t\t809276442226723012951716236123315663471583381870386200917746106613185945511;\n\n\tuint256 constant IC17x =\n\t\t5982511498346272830450928090657905047310027938091831616388986968174660586744;\n\tuint256 constant IC17y =\n\t\t15509127295444748557090617809365430814867930584899709527225185467490860295086;\n\n\tuint256 constant IC18x =\n\t\t15365343054745101753330314041829116085855183564203118460990124415505406826969;\n\tuint256 constant IC18y =\n\t\t17550334504170479775394246899009393639023697741142100255396130594222187928235;\n\n\tuint256 constant IC19x =\n\t\t7866355633237906295444698578127110324394052841768366342612858876150827405474;\n\tuint256 constant IC19y =\n\t\t21464430858041884878748298065323900366619776908859780580478489782011725400869;\n\n\tuint256 constant IC20x =\n\t\t11409965274336198784885022968006318806697639878378509836184034039018205539006;\n\tuint256 constant IC20y =\n\t\t2443082599914764314285778254288797740317850473858339183835017083972658705816;\n\n\tuint256 constant IC21x =\n\t\t20631196981412679591470644564470136894629638047203062147303028037747691665185;\n\tuint256 constant IC21y =\n\t\t16030610042702802775194942172772282453105682971282460674664358376585398028650;\n\n\tuint256 constant IC22x =\n\t\t5932873505001011489814504863389327841014515111140308423692006170058593510855;\n\tuint256 constant IC22y =\n\t\t17566953660226211786235303649779767015859352055560931781743606930162242017339;\n\n\tuint256 constant IC23x =\n\t\t3570407908188742187942244566545561532804329313116603204071955254293457835048;\n\tuint256 constant IC23y =\n\t\t888957545326078483334559831881533014254240676372674098014547184419455701116;\n\n\tuint256 constant IC24x =\n\t\t3277288689053454364185820642980692937625084036430455814141706935377344738916;\n\tuint256 constant IC24y =\n\t\t2696579421093670315121077129338319488278396897166913536990931383538616930167;\n\n\tuint256 constant IC25x =\n\t\t8817735724143429914354176447563561385550814562843114609784812848112341015983;\n\tuint256 constant IC25y =\n\t\t13601212939446098126684839800441456907956559897949946002758742646493707282910;\n\n\tuint256 constant IC26x =\n\t\t242520524804255889063254246699618495647968774167019791729252562138656964225;\n\tuint256 constant IC26y =\n\t\t16973052504220229148399058252278309977055266771019496607437733674562578695485;\n\n\tuint256 constant IC27x =\n\t\t9013440492883720882679839217393830253117904651891690131192913212688263035425;\n\tuint256 constant IC27y =\n\t\t2315255966339599410626919212510568554886702627946488701592576459930568620330;\n\n\tuint256 constant IC28x =\n\t\t20679024761061200931816572597032340280314547584004877718544566240873670628592;\n\tuint256 constant IC28y =\n\t\t18414855204652616530204390391588003816097467665749731519336041029937302999453;\n\n\tuint256 constant IC29x =\n\t\t15072238453926190207791223017865893501821923615348984249884825516230481256082;\n\tuint256 constant IC29y =\n\t\t8895769322320811707816032509589818173329092645233968889885933660205774178706;\n\n\tuint256 constant IC30x =\n\t\t8094336611135960044601785233929226833486685560260660169986135663954428520824;\n\tuint256 constant IC30y =\n\t\t8369015164321101629728699871242940331641480615160209965994546508586139206741;\n\n\tuint256 constant IC31x =\n\t\t7731401541551544766699504483993337254794583686019158504985376407109162651461;\n\tuint256 constant IC31y =\n\t\t6875232187288241504932091965559094778639331441478864488775043444383484728099;\n\n\tuint256 constant IC32x =\n\t\t15499568761668065997918859624568562489526362773924227148983177629553450965712;\n\tuint256 constant IC32y =\n\t\t37183277849483539583991543127527538945636653775623877772561407984346105078;\n\n\tuint256 constant IC33x =\n\t\t4830297224837660087468639850081711742034935708467584422471158078126920708577;\n\tuint256 constant IC33y =\n\t\t3176598632718619413479684717877505425106590182052247940017298335183173430555;\n\n\tuint256 constant IC34x =\n\t\t10903574547819748549732540241229407360774915035217537369261916171194637443689;\n\tuint256 constant IC34y =\n\t\t8858084338009697021205337490679360111246956214665724578280033119614287642646;\n\n\tuint256 constant IC35x =\n\t\t15154785802553093403431522473988497260639725114747604440906057109686573477260;\n\tuint256 constant IC35y =\n\t\t17795783893908215353511907097930773017805088530085337443958991067967762102655;\n\n\tuint256 constant IC36x =\n\t\t2877376750994603714365289452890690316758364618871559804575161188222888112659;\n\tuint256 constant IC36y =\n\t\t21735034166232609946148691607738854948236880094749663970921800614808406570078;\n\n\tuint256 constant IC37x =\n\t\t3106333406220985162662100498986097229503869771836880247449360175981334157219;\n\tuint256 constant IC37y =\n\t\t17865223479402419176248696836928756900496547663372228667207093311437768295043;\n\n\tuint256 constant IC38x =\n\t\t697616770606607558981076211967433584976298008163992912003754086388870284439;\n\tuint256 constant IC38y =\n\t\t11906015812090725752663954648490567553779437355520102774022319868767187695689;\n\n\tuint256 constant IC39x =\n\t\t3066310853266947605681856994423652372406552925855313167141079102185871744170;\n\tuint256 constant IC39y =\n\t\t7626480973749375313659327633446078949888566319591497861831619014932519116751;\n\n\tuint256 constant IC40x =\n\t\t15547701183470494067964667727872231581260922370486244851758214336411550884118;\n\tuint256 constant IC40y =\n\t\t17254233622002752357409825536770526543691283207810763163037848030419243484107;\n\n\tuint256 constant IC41x =\n\t\t148292111307819306551390818446543424926350137834811534314052769163101561615;\n\tuint256 constant IC41y =\n\t\t5500278154531033306799803347968647249419995483363964893976872863860493675643;\n\n\tuint256 constant IC42x =\n\t\t12743968346040894236883464766141708515376809290327284933867605208542292732858;\n\tuint256 constant IC42y =\n\t\t8018727597120067346853370292627401274187160859591238514067106241642604330800;\n\n\tuint256 constant IC43x =\n\t\t691582148862529301778359900102607488395950567870758626909238499283070907403;\n\tuint256 constant IC43y =\n\t\t8322981267261297384216741120713931240448479642727454047966782335276500598941;\n\n\tuint256 constant IC44x =\n\t\t9278556347697362408180475360650302879696956102573343825404708863886542469887;\n\tuint256 constant IC44y =\n\t\t9707313610712975990137006496452650791189150375669922886361334038088982701633;\n\n\tuint256 constant IC45x =\n\t\t16829628853824851952140218215780485977108634939746967111056084269789078029054;\n\tuint256 constant IC45y =\n\t\t4014469364669616007649171544577204356746921930709274053313209030043418033476;\n\n\tuint256 constant IC46x =\n\t\t6641507292884053256398842662760831671384924006947363057533254043701551586373;\n\tuint256 constant IC46y =\n\t\t7538020194481282455458251442306108143426114350545149178408028117651220441472;\n\n\tuint256 constant IC47x =\n\t\t12391637512080499257662827283609890066662280564827165438208548685097578037073;\n\tuint256 constant IC47y =\n\t\t19437801841177143231245408244309863501557488312715256561188881154500655967430;\n\n\tuint256 constant IC48x =\n\t\t2890419354616910106196901223286921838329798511800552609084640710443390163241;\n\tuint256 constant IC48y =\n\t\t17975752498184815248395543766804130572102816400153672759006930380470336365869;\n\n\tuint256 constant IC49x =\n\t\t6356005874902387613526417303680497717538411035346314609640597118219882038318;\n\tuint256 constant IC49y =\n\t\t8302058795733576312472765323167781290091115643523515316545093550229011458540;\n\n\tuint256 constant IC50x =\n\t\t11467131470051250993846835458840241675362424681819054061438248446919198169881;\n\tuint256 constant IC50y =\n\t\t3871876403715839319031033065719065817272850181251392446785808539701071977102;\n\n\tuint256 constant IC51x =\n\t\t15418086696872287571839851755232562114887233182615521852215658895185306876954;\n\tuint256 constant IC51y =\n\t\t15382077575814602641342651729699573330025044617981182458503295491525153173084;\n\n\tuint256 constant IC52x =\n\t\t3518987841129817544165039005314383353101340037797957633052466976442785122773;\n\tuint256 constant IC52y =\n\t\t13837229004430570059744211328338876274484428344134154507669720190847659718233;\n\n\tuint256 constant IC53x =\n\t\t7836949953256230571863851319029582093455769148252637278978059072186916563644;\n\tuint256 constant IC53y =\n\t\t16016031450925672052785771223602323332437162896094661214304742145432039577613;\n\n\tuint256 constant IC54x =\n\t\t20068450523518386339209415533919057643114001865737097665607475828358564264945;\n\tuint256 constant IC54y =\n\t\t16421501709602348379027099074800499750625346088991760891399592152922510486159;\n\n\tuint256 constant IC55x =\n\t\t6956561678992452882033176540383047718724367746360885744508319174475838500863;\n\tuint256 constant IC55y =\n\t\t852570432177137889322374252700826029568865060946246166272021327148649269580;\n\n\tuint256 constant IC56x =\n\t\t19239577481052852428204088163978921314665017300758086261251463662450612991642;\n\tuint256 constant IC56y =\n\t\t3132276701298581485739714988349614613303009325166772769288844918814734649647;\n\n\t// Memory data\n\tuint16 constant pVk = 0;\n\tuint16 constant pPairing = 128;\n\n\tuint16 constant pLastMem = 896;\n\n\tfunction verifyProof(\n\t\tuint[2] calldata _pA,\n\t\tuint[2][2] calldata _pB,\n\t\tuint[2] calldata _pC,\n\t\tuint[56] calldata _pubSignals\n\t) public view returns (bool) {\n\t\tassembly {\n\t\t\tfunction checkField(v) {\n\t\t\t\tif iszero(lt(v, r)) {\n\t\t\t\t\tmstore(0, 0)\n\t\t\t\t\treturn(0, 0x20)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// G1 function to multiply a G1 value(x,y) to value in an address\n\t\t\tfunction g1_mulAccC(pR, x, y, s) {\n\t\t\t\tlet success\n\t\t\t\tlet mIn := mload(0x40)\n\t\t\t\tmstore(mIn, x)\n\t\t\t\tmstore(add(mIn, 32), y)\n\t\t\t\tmstore(add(mIn, 64), s)\n\n\t\t\t\tsuccess := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n\t\t\t\tif iszero(success) {\n\t\t\t\t\tmstore(0, 0)\n\t\t\t\t\treturn(0, 0x20)\n\t\t\t\t}\n\n\t\t\t\tmstore(add(mIn, 64), mload(pR))\n\t\t\t\tmstore(add(mIn, 96), mload(add(pR, 32)))\n\n\t\t\t\tsuccess := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n\t\t\t\tif iszero(success) {\n\t\t\t\t\tmstore(0, 0)\n\t\t\t\t\treturn(0, 0x20)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n\t\t\t\tlet _pPairing := add(pMem, pPairing)\n\t\t\t\tlet _pVk := add(pMem, pVk)\n\n\t\t\t\tmstore(_pVk, IC0x)\n\t\t\t\tmstore(add(_pVk, 32), IC0y)\n\n\t\t\t\t// Compute the linear combination vk_x\n\n\t\t\t\tg1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n\n\t\t\t\tg1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC10x,\n\t\t\t\t\tIC10y,\n\t\t\t\t\tcalldataload(add(pubSignals, 288))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC11x,\n\t\t\t\t\tIC11y,\n\t\t\t\t\tcalldataload(add(pubSignals, 320))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC12x,\n\t\t\t\t\tIC12y,\n\t\t\t\t\tcalldataload(add(pubSignals, 352))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC13x,\n\t\t\t\t\tIC13y,\n\t\t\t\t\tcalldataload(add(pubSignals, 384))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC14x,\n\t\t\t\t\tIC14y,\n\t\t\t\t\tcalldataload(add(pubSignals, 416))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC15x,\n\t\t\t\t\tIC15y,\n\t\t\t\t\tcalldataload(add(pubSignals, 448))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC16x,\n\t\t\t\t\tIC16y,\n\t\t\t\t\tcalldataload(add(pubSignals, 480))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC17x,\n\t\t\t\t\tIC17y,\n\t\t\t\t\tcalldataload(add(pubSignals, 512))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC18x,\n\t\t\t\t\tIC18y,\n\t\t\t\t\tcalldataload(add(pubSignals, 544))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC19x,\n\t\t\t\t\tIC19y,\n\t\t\t\t\tcalldataload(add(pubSignals, 576))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC20x,\n\t\t\t\t\tIC20y,\n\t\t\t\t\tcalldataload(add(pubSignals, 608))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC21x,\n\t\t\t\t\tIC21y,\n\t\t\t\t\tcalldataload(add(pubSignals, 640))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC22x,\n\t\t\t\t\tIC22y,\n\t\t\t\t\tcalldataload(add(pubSignals, 672))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC23x,\n\t\t\t\t\tIC23y,\n\t\t\t\t\tcalldataload(add(pubSignals, 704))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC24x,\n\t\t\t\t\tIC24y,\n\t\t\t\t\tcalldataload(add(pubSignals, 736))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC25x,\n\t\t\t\t\tIC25y,\n\t\t\t\t\tcalldataload(add(pubSignals, 768))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC26x,\n\t\t\t\t\tIC26y,\n\t\t\t\t\tcalldataload(add(pubSignals, 800))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC27x,\n\t\t\t\t\tIC27y,\n\t\t\t\t\tcalldataload(add(pubSignals, 832))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC28x,\n\t\t\t\t\tIC28y,\n\t\t\t\t\tcalldataload(add(pubSignals, 864))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC29x,\n\t\t\t\t\tIC29y,\n\t\t\t\t\tcalldataload(add(pubSignals, 896))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC30x,\n\t\t\t\t\tIC30y,\n\t\t\t\t\tcalldataload(add(pubSignals, 928))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC31x,\n\t\t\t\t\tIC31y,\n\t\t\t\t\tcalldataload(add(pubSignals, 960))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC32x,\n\t\t\t\t\tIC32y,\n\t\t\t\t\tcalldataload(add(pubSignals, 992))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC33x,\n\t\t\t\t\tIC33y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1024))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC34x,\n\t\t\t\t\tIC34y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1056))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC35x,\n\t\t\t\t\tIC35y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1088))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC36x,\n\t\t\t\t\tIC36y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1120))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC37x,\n\t\t\t\t\tIC37y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1152))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC38x,\n\t\t\t\t\tIC38y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1184))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC39x,\n\t\t\t\t\tIC39y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1216))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC40x,\n\t\t\t\t\tIC40y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1248))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC41x,\n\t\t\t\t\tIC41y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1280))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC42x,\n\t\t\t\t\tIC42y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1312))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC43x,\n\t\t\t\t\tIC43y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1344))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC44x,\n\t\t\t\t\tIC44y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1376))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC45x,\n\t\t\t\t\tIC45y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1408))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC46x,\n\t\t\t\t\tIC46y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1440))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC47x,\n\t\t\t\t\tIC47y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1472))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC48x,\n\t\t\t\t\tIC48y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1504))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC49x,\n\t\t\t\t\tIC49y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1536))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC50x,\n\t\t\t\t\tIC50y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1568))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC51x,\n\t\t\t\t\tIC51y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1600))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC52x,\n\t\t\t\t\tIC52y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1632))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC53x,\n\t\t\t\t\tIC53y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1664))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC54x,\n\t\t\t\t\tIC54y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1696))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC55x,\n\t\t\t\t\tIC55y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1728))\n\t\t\t\t)\n\n\t\t\t\tg1_mulAccC(\n\t\t\t\t\t_pVk,\n\t\t\t\t\tIC56x,\n\t\t\t\t\tIC56y,\n\t\t\t\t\tcalldataload(add(pubSignals, 1760))\n\t\t\t\t)\n\n\t\t\t\t// -A\n\t\t\t\tmstore(_pPairing, calldataload(pA))\n\t\t\t\tmstore(\n\t\t\t\t\tadd(_pPairing, 32),\n\t\t\t\t\tmod(sub(q, calldataload(add(pA, 32))), q)\n\t\t\t\t)\n\n\t\t\t\t// B\n\t\t\t\tmstore(add(_pPairing, 64), calldataload(pB))\n\t\t\t\tmstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n\t\t\t\tmstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n\t\t\t\tmstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n\t\t\t\t// alpha1\n\t\t\t\tmstore(add(_pPairing, 192), alphax)\n\t\t\t\tmstore(add(_pPairing, 224), alphay)\n\n\t\t\t\t// beta2\n\t\t\t\tmstore(add(_pPairing, 256), betax1)\n\t\t\t\tmstore(add(_pPairing, 288), betax2)\n\t\t\t\tmstore(add(_pPairing, 320), betay1)\n\t\t\t\tmstore(add(_pPairing, 352), betay2)\n\n\t\t\t\t// vk_x\n\t\t\t\tmstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n\t\t\t\tmstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\t\t\t\t// gamma2\n\t\t\t\tmstore(add(_pPairing, 448), gammax1)\n\t\t\t\tmstore(add(_pPairing, 480), gammax2)\n\t\t\t\tmstore(add(_pPairing, 512), gammay1)\n\t\t\t\tmstore(add(_pPairing, 544), gammay2)\n\n\t\t\t\t// C\n\t\t\t\tmstore(add(_pPairing, 576), calldataload(pC))\n\t\t\t\tmstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n\t\t\t\t// delta2\n\t\t\t\tmstore(add(_pPairing, 640), deltax1)\n\t\t\t\tmstore(add(_pPairing, 672), deltax2)\n\t\t\t\tmstore(add(_pPairing, 704), deltay1)\n\t\t\t\tmstore(add(_pPairing, 736), deltay2)\n\n\t\t\t\tlet success := staticcall(\n\t\t\t\t\tsub(gas(), 2000),\n\t\t\t\t\t8,\n\t\t\t\t\t_pPairing,\n\t\t\t\t\t768,\n\t\t\t\t\t_pPairing,\n\t\t\t\t\t0x20\n\t\t\t\t)\n\n\t\t\t\tisOk := and(success, mload(_pPairing))\n\t\t\t}\n\n\t\t\tlet pMem := mload(0x40)\n\t\t\tmstore(0x40, add(pMem, pLastMem))\n\n\t\t\t// Validate that all evaluations ∈ F\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 0)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 32)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 64)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 96)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 128)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 160)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 192)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 224)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 256)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 288)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 320)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 352)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 384)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 416)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 448)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 480)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 512)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 544)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 576)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 608)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 640)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 672)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 704)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 736)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 768)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 800)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 832)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 864)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 896)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 928)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 960)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 992)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1024)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1056)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1088)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1120)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1152)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1184)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1216)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1248)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1280)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1312)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1344)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1376)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1408)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1440)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1472)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1504)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1536)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1568)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1600)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1632)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1664)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1696)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1728)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1760)))\n\n\t\t\tcheckField(calldataload(add(_pubSignals, 1792)))\n\n\t\t\t// Validate all evaluations\n\t\t\tlet isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n\t\t\tmstore(0, isValid)\n\t\t\treturn(0, 0x20)\n\t\t}\n\t}\n}\n"
    },
    "contracts/Poseidon.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ncontract Poseidon {\n\tuint constant M00 =\n\t\t0x066f6f85d6f68a85ec10345351a23a3aaf07f38af8c952a7bceca70bd2af7ad5;\n\tuint constant M01 =\n\t\t0x0cc57cdbb08507d62bf67a4493cc262fb6c09d557013fff1f573f431221f8ff9;\n\tuint constant M10 =\n\t\t0x2b9d4b4110c9ae997782e1509b1d0fdb20a7c02bbd8bea7305462b9f8125b1e8;\n\tuint constant M11 =\n\t\t0x1274e649a32ed355a31a6ed69724e1adade857e86eb5c3a121bcd147943203c8;\n\n\t// See here for a simplified implementation: https://github.com/vimwitch/poseidon-solidity/blob/e57becdabb65d99fdc586fe1e1e09e7108202d53/contracts/Poseidon.sol#L40\n\t// Inspired by: https://github.com/iden3/circomlibjs/blob/v0.0.8/src/poseidon_slow.js\n\tfunction hash(uint[1] memory) public pure returns (uint) {\n\t\tassembly {\n\t\t\tlet\n\t\t\t\tF\n\t\t\t:= 21888242871839275222246405745257275088548364400416034343698204186575808495617\n\n\t\t\t// load the inputs from memory\n\t\t\tlet state1 := add(\n\t\t\t\tmod(mload(0x80), F),\n\t\t\t\t0x0c0356530896eec42a97ed937f3135cfc5142b3ae405b8343c1d83ffa604cb81\n\t\t\t)\n\t\t\tlet scratch0 := mulmod(state1, state1, F)\n\t\t\tstate1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1e28a1d935698ad1142e51182bb54cf4a00ea5aabd6268bd317ea977cc154a30,\n\t\t\t\tadd(\n\t\t\t\t\t2135211596334038589877319861485022046541061518379136709265746501298180122869,\n\t\t\t\t\tmulmod(state1, M10, F)\n\t\t\t\t)\n\t\t\t)\n\t\t\tlet scratch1 := add(\n\t\t\t\t0x27af2d831a9d2748080965db30e298e40e5757c3e008db964cf9e2b12b91251f,\n\t\t\t\tadd(\n\t\t\t\t\t14770526369429531795265880089668477939070475643153877209429555040029415045210,\n\t\t\t\t\tmulmod(state1, M11, F)\n\t\t\t\t)\n\t\t\t)\n\t\t\tlet state0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := mulmod(scratch1, scratch1, F)\n\t\t\tscratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1e6f11ce60fc8f513a6a3cfe16ae175a41291462f214cd0879aaf43545b74e03,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x2a67384d3bbd5e438541819cb681f0be04462ed14c3613d8f719206268d142d3,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := mulmod(state1, state1, F)\n\t\t\tstate1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0b66fdf356093a611609f8e12fbfecf0b985e381f025188936408f5d5c9f45d0,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x012ee3ec1e78d470830c61093c2ade370b26c83cc5cebeeddaa6852dbdb09e21,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := mulmod(scratch1, scratch1, F)\n\t\t\tscratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0252ba5f6760bfbdfd88f67f8175e3fd6cd1c431b099b6bb2d108e7b445bb1b9,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x179474cceca5ff676c6bec3cef54296354391a8935ff71d6ef5aeaad7ca932f1,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x2c24261379a51bfa9228ff4a503fd4ed9c1f974a264969b37e1a2589bbed2b91,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1cc1d7b62692e63eac2f288bd0695b43c2f63f5001fc0fc553e66c0551801b05,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x255059301aada98bb2ed55f852979e9600784dbf17fbacd05d9eff5fd9c91b56,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x28437be3ac1cb2e479e1f5c0eccd32b3aea24234970a8193b11c29ce7e59efd9,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x28216a442f2e1f711ca4fa6b53766eb118548da8fb4f78d4338762c37f5f2043,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x2c1f47cd17fa5adf1f39f4e7056dd03feee1efce03094581131f2377323482c9,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x07abad02b7a5ebc48632bcc9356ceb7dd9dafca276638a63646b8566a621afc9,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x0230264601ffdf29275b33ffaab51dfe9429f90880a69cd137da0c4d15f96c3c,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1bc973054e51d905a0f168656497ca40a864414557ee289e717e5d66899aa0a9,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x2e1c22f964435008206c3157e86341edd249aff5c2d8421f2a6b22288f0a67fc,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1224f38df67c5378121c1d5f461bbc509e8ea1598e46c9f7a70452bc2bba86b8,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x02e4e69d8ba59e519280b4bd9ed0068fd7bfe8cd9dfeda1969d2989186cde20e,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1f1eccc34aaba0137f5df81fc04ff3ee4f19ee364e653f076d47e9735d98018e,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1672ad3d709a353974266c3039a9a7311424448032cd1819eacb8a4d4284f582,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x283e3fdc2c6e420c56f44af5192b4ae9cda6961f284d24991d2ed602df8c8fc7,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x1c2a3d120c550ecfd0db0957170fa013683751f8fdff59d6614fbd69ff394bcc,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x216f84877aac6172f7897a7323456efe143a9a43773ea6f296cb6b8177653fbd,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x2c0d272becf2a75764ba7e8e3e28d12bceaa47ea61ca59a411a1f51552f94788,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x16e34299865c0e28484ee7a74c454e9f170a5480abe0508fcb4a6c3d89546f43,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x175ceba599e96f5b375a232a6fb9cc71772047765802290f48cd939755488fc5,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0c7594440dc48c16fead9e1758b028066aa410bfbc354f54d8c5ffbb44a1ee32,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1a3c29bc39f21bb5c466db7d7eb6fd8f760e20013ccf912c92479882d919fd8d,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0ccfdd906f3426e5c0986ea049b253400855d349074f5a6695c8eeabcd22e68f,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x14f6bc81d9f186f62bdb475ce6c9411866a7a8a3fd065b3ce0e699b67dd9e796,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0962b82789fb3d129702ca70b2f6c5aacc099810c9c495c888edeb7386b97052,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1a880af7074d18b3bf20c79de25127bc13284ab01ef02575afef0c8f6a31a86d,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x10cba18419a6a332cd5e77f0211c154b20af2924fc20ff3f4c3012bb7ae9311b,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x057e62a9a8f89b3ebdc76ba63a9eaca8fa27b7319cae3406756a2849f302f10d,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x287c971de91dc0abd44adf5384b4988cb961303bbf65cff5afa0413b44280cee,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x21df3388af1687bbb3bca9da0cca908f1e562bc46d4aba4e6f7f7960e306891d,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1be5c887d25bce703e25cc974d0934cd789df8f70b498fd83eff8b560e1682b3,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x268da36f76e568fb68117175cea2cd0dd2cb5d42fda5acea48d59c2706a0d5c1,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0e17ab091f6eae50c609beaf5510ececc5d8bb74135ebd05bd06460cc26a5ed6,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x04d727e728ffa0a67aee535ab074a43091ef62d8cf83d270040f5caa1f62af40,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0ddbd7bf9c29341581b549762bc022ed33702ac10f1bfd862b15417d7e39ca6e,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x2790eb3351621752768162e82989c6c234f5b0d1d3af9b588a29c49c8789654b,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1e457c601a63b73e4471950193d8a570395f3d9ab8b2fd0984b764206142f9e9,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x21ae64301dca9625638d6ab2bbe7135ffa90ecd0c43ff91fc4c686fc46e091b0,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0379f63c8ce3468d4da293166f494928854be9e3432e09555858534eed8d350b,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x002d56420359d0266a744a080809e054ca0e4921a46686ac8c9f58a324c35049,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x123158e5965b5d9b1d68b3cd32e10bbeda8d62459e21f4090fc2c5af963515a6,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x0be29fc40847a941661d14bbf6cbe0420fbb2b6f52836d4e60c80eb49cad9ec1,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1ac96991dec2bb0557716142015a453c36db9d859cad5f9a233802f24fdf4c1a,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x1596443f763dbcc25f4964fc61d23b3e5e12c9fa97f18a9251ca3355bcb0627e,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x12e0bcd3654bdfa76b2861d4ec3aeae0f1857d9f17e715aed6d049eae3ba3212,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x0fc92b4f1bbea82b9ea73d4af9af2a50ceabac7f37154b1904e6c76c7cf964ba,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1f9c0b1610446442d6f2e592a8013f40b14f7c7722236f4f9c7e965233872762,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x0ebd74244ae72675f8cde06157a782f4050d914da38b4c058d159f643dbbf4d3,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x2cb7f0ed39e16e9f69a9fafd4ab951c03b0671e97346ee397a839839dccfc6d1,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1a9d6e2ecff022cc5605443ee41bab20ce761d0514ce526690c72bca7352d9bf,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x2a115439607f335a5ea83c3bc44a9331d0c13326a9a7ba3087da182d648ec72f,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x23f9b6529b5d040d15b8fa7aee3e3410e738b56305cd44f29535c115c5a4c060,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x05872c16db0f72a2249ac6ba484bb9c3a3ce97c16d58b68b260eb939f0e6e8a7,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1300bdee08bb7824ca20fb80118075f40219b6151d55b5c52b624a7cdeddf6a7,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x19b9b63d2f108e17e63817863a8f6c288d7ad29916d98cb1072e4e7b7d52b376,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x015bee1357e3c015b5bda237668522f613d1c88726b5ec4224a20128481b4f7f,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x2953736e94bb6b9f1b9707a4f1615e4efe1e1ce4bab218cbea92c785b128ffd1,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x0b069353ba091618862f806180c0385f851b98d372b45f544ce7266ed6608dfc,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x304f74d461ccc13115e4e0bcfb93817e55aeb7eb9306b64e4f588ac97d81f429,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x15bbf146ce9bca09e8a33f5e77dfe4f5aad2a164a4617a4cb8ee5415cde913fc,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0ab4dfe0c2742cde44901031487964ed9b8f4b850405c10ca9ff23859572c8c6,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x0e32db320a044e3197f45f7649a19675ef5eedfea546dea9251de39f9639779a,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0a1756aa1f378ca4b27635a78b6888e66797733a82774896a3078efa516da016,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x044c4a33b10f693447fd17177f952ef895e61d328f85efa94254d6a2a25d93ef,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x2ed3611b725b8a70be655b537f66f700fe0879d79a496891d37b07b5466c4b8b,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1f9ba4e8bab7ce42c8ecc3d722aa2e0eadfdeb9cfdd347b5d8339ea7120858aa,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1b233043052e8c288f7ee907a84e518aa38e82ac4502066db74056f865c5d3da,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x2431e1cc164bb8d074031ab72bd55b4c902053bfc0f14db0ca2f97b020875954,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x082f934c91f5aac330cd6953a0a7db45a13e322097583319a791f273965801fd,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x2b9a0a223e7538b0a34be074315542a3c77245e2ae7cbe999ad6bb930c48997c,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0e1cd91edd2cfa2cceb85483b887a9be8164163e75a8a00eb0b589cc70214e7d,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x2e1eac0f2bfdfd63c951f61477e3698999774f19854d00f588d324601cebe2f9,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0cbfa95f37fb74060c76158e769d6d157345784d8efdb33c23d748115b500b83,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x08f05b3be923ed44d65ad49d8a61e9a676d991e3a77513d9980c232dfa4a4f84,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x22719e2a070bcd0852bf8e21984d0443e7284925dc0758a325a2dd510c047ef6,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x041f596a9ee1cb2bc060f7fcc3a1ab4c7bdbf036119982c0f41f62b2f26830c0,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x233fd35de1be520a87628eb06f6b1d4c021be1c2d0dc464a19fcdd0986b10f89,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x0524b46d1aa87a5e4325e0a423ebc810d31e078aa1b4707eefcb453c61c9c267,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x2c34f424c81e5716ce47fcac894b85824227bb954b0f3199cc4486237c515211,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x0b5f2a4b63387819207effc2b5541fb72dd2025b5457cc97f33010327de4915e,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x22207856082ccc54c5b72fe439d2cfd6c17435d2f57af6ceaefac41fe05c659f,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x24d57a8bf5da63fe4e24159b7f8950b5cdfb210194caf79f27854048ce2c8171,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0afab181fdd5e0583b371d75bd693f98374ad7097bb01a8573919bb23b79396e,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x2dba9b108f208772998a52efac7cbd5676c0057194c16c0bf16290d62b1128ee,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x26349b66edb8b16f56f881c788f53f83cbb83de0bd592b255aff13e6bce420b3,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x25af7ce0e5e10357685e95f92339753ad81a56d28ecc193b235288a3e6f137db,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x25b4ce7bd2294390c094d6a55edd68b970eed7aae88b2bff1f7c0187fe35011f,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x22c543f10f6c89ec387e53f1908a88e5de9cef28ebdf30b18cb9d54c1e02b631,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0236f93e7789c4724fc7908a9f191e1e425e906a919d7a34df668e74882f87a9,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x29350b401166ca010e7d27e37d05da99652bdae114eb01659cb497af980c4b52,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0eed787d65820d3f6bd31bbab547f75a65edb75d844ebb89ee1260916652363f,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x07cc1170f13b46f2036a753f520b3291fdcd0e99bd94297d1906f656f4de6fad,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x22b939233b1d7205f49bcf613a3d30b1908786d7f9f5d10c2059435689e8acea,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x01451762a0aab81c8aad1dc8bc33e870740f083a5aa85438add650ace60ae5a6,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x23506bb5d8727d4461fabf1025d46d1fe32eaa61dec7da57e704fec0892fce89,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x2e484c44e838aea0bac06ae3f71bdd092a3709531e1efea97f8bd68907355522,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x0f4bc7d07ebafd64379e78c50bd2e42baf4a594545cedc2545418da26835b54c,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1f4d3c8f6583e9e5fa76637862faaee851582388725df460e620996d50d8e74e,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x093514e0c70711f82660d07be0e4a988fae02abc7b681d9153eb9bcb48fe7389,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x1adab0c8e2b3bad346699a2b5f3bc03643ee83ece47228f24a58e0a347e153d8,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1672b1726057d99dd14709ebb474641a378c1b94b8072bac1a22dbef9e80dad2,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1dfd53d4576af2e38f44f53fdcab468cc5d8e2fae0acc4ee30d47b239b479c14,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x0c6888a10b75b0f3a70a36263a37e17fe6d77d640f6fc3debc7f207753205c60,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x1addb933a65be77092b34a7e77d12fe8611a61e00ee6848b85091ecca9d1e508,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x00d7540dcd268a845c10ae18d1de933cf638ff5425f0afff7935628e299d1791,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x140c0e42687e9ead01b2827a5664ca9c26fedde4acd99db1d316939d20b82c0e,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x2f0c3a115d4317d191ba89b8d13d1806c20a0f9b24f8c5edc091e2ae56565984,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x0c4ee778ff7c14553006ed220cf9c81008a0cff670b22b82d8c538a1dc958c61,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1704f2766d46f82c3693f00440ccc3609424ed26c0acc66227c3d7485de74c69,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x2f2d19cc3ea5d78ea7a02c1b51d244abf0769c9f8544e40239b66fe9009c3cfa,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x1ae03853b75fcaba5053f112e2a8e8dcdd7ee6cb9cfed9c7d6c766a806fc6629,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x0971aabf795241df51d131d0fa61aa5f3556921b2d6f014e4e41a86ddaf056d5,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := mulmod(state1, state1, F)\n\t\t\tstate1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1408c316e6014e1a91d4cf6b6e0de73eda624f8380df1c875f5c29f7bfe2f646,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x1667f3fe2edbe850248abe42b543093b6c89f1f773ef285341691f39822ef5bd,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := mulmod(scratch1, scratch1, F)\n\t\t\tscratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n\t\t\tstate0 := add(\n\t\t\t\t0x13bf7c5d0d2c4376a48b0a03557cdf915b81718409e5c133424c69576500fe37,\n\t\t\t\tadd(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F))\n\t\t\t)\n\t\t\tstate1 := add(\n\t\t\t\t0x07620a6dfb0b6cec3016adf3d3533c24024b95347856b79719bc0ba743a62c2c,\n\t\t\t\tadd(mulmod(scratch0, M01, F), mulmod(scratch1, M11, F))\n\t\t\t)\n\t\t\tscratch0 := mulmod(state0, state0, F)\n\t\t\tstate0 := mulmod(mulmod(scratch0, scratch0, F), state0, F)\n\t\t\tscratch0 := mulmod(state1, state1, F)\n\t\t\tstate1 := mulmod(mulmod(scratch0, scratch0, F), state1, F)\n\t\t\tscratch0 := add(\n\t\t\t\t0x1574c7ef0c43545f36a8ca08bdbdd8b075d2959e2f322b731675de3e1982b4d0,\n\t\t\t\tadd(mulmod(state0, M00, F), mulmod(state1, M10, F))\n\t\t\t)\n\t\t\tscratch1 := add(\n\t\t\t\t0x269e4b5b7a2eb21afd567970a717ceec5bd4184571c254fdc06e03a7ff8378f0,\n\t\t\t\tadd(mulmod(state0, M01, F), mulmod(state1, M11, F))\n\t\t\t)\n\t\t\tstate0 := mulmod(scratch0, scratch0, F)\n\t\t\tscratch0 := mulmod(mulmod(state0, state0, F), scratch0, F)\n\t\t\tstate0 := mulmod(scratch1, scratch1, F)\n\t\t\tscratch1 := mulmod(mulmod(state0, state0, F), scratch1, F)\n\n\t\t\tmstore(\n\t\t\t\t0x0,\n\t\t\t\tmod(add(mulmod(scratch0, M00, F), mulmod(scratch1, M10, F)), F)\n\t\t\t)\n\n\t\t\treturn(0, 0x20)\n\t\t}\n\t}\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"./Poseidon.sol\";\nimport \"./Groth16Verifier.sol\";\n\ncontract YourContract is ERC721, Groth16Verifier, Poseidon {\n\t// The known hash of the FrogCrypto signer\n\tuint256 constant FROGCRYPTO_SIGNER_HASH =\n\t\t320469162396708332516033932244029190181315114284264408621970394677041964715;\n\n\tuint256 private _nextTokenId;\n\t// Mapping from address to whether they've minted\n\tmapping(address => bool) public minted;\n\t// Mapping from token ID to owner address\n\tmapping(uint256 => address) public frogOwners;\n\n\tstruct ProofArgs {\n\t\tuint256[2] _pA;\n\t\tuint256[2][2] _pB;\n\t\tuint256[2] _pC;\n\t\tuint256[56] _pubSignals;\n\t}\n\n\tstruct FrogAttributes {\n\t\tuint256 beauty;\n\t\tuint256 biome;\n\t\tuint256 intelligence;\n\t\tuint256 jump;\n\t\tuint256 speed;\n\t\tuint256 rarity;\n\t\tuint256 owner;\n\t}\n\n\tevent FrogMinted(uint256 tokenId, address owner, FrogAttributes attributes);\n\n\tmodifier verifiedProof(ProofArgs calldata proof) {\n\t\trequire(\n\t\t\tthis.verifyProof(\n\t\t\t\tproof._pA,\n\t\t\t\tproof._pB,\n\t\t\t\tproof._pC,\n\t\t\t\tproof._pubSignals\n\t\t\t),\n\t\t\t\"Invalid proof\"\n\t\t);\n\t\t_;\n\t}\n\n\tmodifier notMinted() {\n\t\trequire(!minted[msg.sender], \"Already minted\");\n\t\t_;\n\t}\n\n\tconstructor() ERC721(\"FrogCrypto\", \"FROG\") {}\n\n\tfunction mintFrog(\n\t\tProofArgs calldata proof,\n\t\tFrogAttributes calldata attributes\n\t) public notMinted returns (uint256) {\n\t\t// First verify the proof and attributes\n\t\trequire(\n\t\t\tverifyFrogAttributes(proof, attributes),\n\t\t\t\"Invalid frog attributes\"\n\t\t);\n\n\t\t// Mint the NFT\n\t\tuint256 tokenId = _nextTokenId++;\n\t\tminted[msg.sender] = true;\n\t\tfrogOwners[tokenId] = msg.sender;\n\t\t_safeMint(msg.sender, tokenId);\n\n\t\temit FrogMinted(tokenId, msg.sender, attributes);\n\n\t\treturn tokenId;\n\t}\n\n\tfunction verifyFrogAttributes(\n\t\tProofArgs calldata proof,\n\t\tFrogAttributes calldata attrs\n\t) public view returns (bool) {\n\t\tuint256[56] memory pubSignals = proof._pubSignals;\n\n\t\t// Verify FrogCrypto signer\n\t\trequire(pubSignals[23] == FROGCRYPTO_SIGNER_HASH, \"Invalid signer\");\n\n\t\tuint256[1] memory input;\n\n\t\t// Verify beauty\n\t\tinput[0] = attrs.beauty;\n\t\trequire(this.hash(input) == pubSignals[0], \"Invalid beauty value\");\n\n\t\t// Verify biome\n\t\tinput[0] = attrs.biome;\n\t\trequire(this.hash(input) == pubSignals[1], \"Invalid biome value\");\n\n\t\t// Verify intelligence\n\t\tinput[0] = attrs.intelligence;\n\t\trequire(\n\t\t\tthis.hash(input) == pubSignals[2],\n\t\t\t\"Invalid intelligence value\"\n\t\t);\n\n\t\t// Verify jump\n\t\tinput[0] = attrs.jump;\n\t\trequire(this.hash(input) == pubSignals[3], \"Invalid jump value\");\n\n\t\t// Verify owner\n\t\tinput[0] = attrs.owner;\n\t\trequire(this.hash(input) == pubSignals[5], \"Invalid owner value\");\n\n\t\t// Verify rarity\n\t\tinput[0] = attrs.rarity;\n\t\trequire(this.hash(input) == pubSignals[6], \"Invalid rarity value\");\n\n\t\t// Verify speed\n\t\tinput[0] = attrs.speed;\n\t\trequire(this.hash(input) == pubSignals[7], \"Invalid speed value\");\n\n\t\treturn true;\n\t}\n\n\tfunction tokenURI(\n\t\tuint256 _tokenId\n\t) public view override returns (string memory) {\n\t\trequire(_exists(_tokenId), \"Token does not exist\");\n\t\t// customize this to return your frog metadata\n\t\treturn \"https://bg/frog-metadata/\";\n\t}\n\n\tfunction getFrogOwner(uint256 tokenId) public view returns (address) {\n\t\trequire(_exists(tokenId), \"Token does not exist\");\n\t\treturn frogOwners[tokenId];\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}